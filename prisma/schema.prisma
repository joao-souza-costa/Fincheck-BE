// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String @unique
  password String

  bankAccounts BankAccount[]
  categories   Category[]
  transactions Transaction[]
  appointment  Appointment[]

  @@map("users")
}

enum BankAccountEnum {
  CHECKING
  INVESTMENT
  CASH

  @@map("bank_account_enum")
}

model BankAccount {
  id           String          @id @default(uuid()) @db.Uuid
  userId       String          @map("user_id") @db.Uuid
  name         String
  type         BankAccountEnum
  color        String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("bank_accounts")
}

model Category {
  id     String          @id @default(uuid()) @db.Uuid
  userId String          @map("user_id") @db.Uuid
  name   String
  icon   String
  type   TransactionEnum

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  Appointments Appointment[]

  @@map("categories")
}

enum TransactionEnum {
  INCOME
  EXPENSE
  SERVICE

  @@map("transaction_enum")
}

enum PaymentTypeEnum {
  CASH
  CREDIT
  DEBIT
  PIX
  BILLET

  @@map("payment_type_enum")
}

model Transaction {
  id            String          @id @default(uuid()) @db.Uuid
  userId        String          @map("user_id") @db.Uuid
  bankAccountId String          @map("bank_account_id") @db.Uuid
  categoryId    String?         @map("category_id") @db.Uuid
  name          String
  value         Float
  date          DateTime
  type          TransactionEnum
  paymentType   PaymentTypeEnum @default(PIX) @map("payment_type")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount BankAccount  @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  Appointment Appointment?

  @@map("transactions")
}

enum AppointmentStatusEnum {
  OPEN
  RESERVED
  CONFIRMED
  CANCELLED

  @@map("appointment_status_enum")
}

model Client {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  email       String        @unique
  password    String
  phone       String
  birthDate   DateTime      @map("birth_date")
  Appointment Appointment[]

  @@map("client")
}

model Appointment {
  id     String                @id @default(uuid()) @db.Uuid
  date   DateTime
  status AppointmentStatusEnum @default(OPEN)

  userId        String  @map("user_id") @db.Uuid
  clientId      String? @map("client_id") @db.Uuid
  categoryId    String? @map("category_id") @db.Uuid
  transactionId String? @unique @map("transaction_id") @db.Uuid

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  client       Client?      @relation(fields: [clientId], references: [id], onDelete: SetNull)
  category     Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  transactions Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("appointments")
}
